#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('rase.io:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

// Certificate
const privateKey = fs.readFileSync('/etc/letsencrypt/live/chat.enam.io/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/chat.enam.io/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/chat.enam.io/chain.pem', 'utf8');

const credentials = {
	key: privateKey,
	cert: certificate,
	ca: ca
};



// Starting both http & https servers
//var server = https.createServer(credentials, app);
 
http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
}).listen(80);
/*
const server = https.listen(443,() => {
	console.log('HTTPS Server running on port 443');
});
*/
/**
 * Listen on provided port, on all network interfaces.
 */

var server = https.createServer(credentials, app);
server.listen(port);

var io = require('socket.io')(server);
io.sockets.on('connection', function(socket){
  //Connect
   connections.push(socket)
   console.log('socket connection %s', connections.length);
   
   //Listen to event "disconnect"
   socket.on('disconnect',function(data){
       //Disconnect
       connections.splice(connections.indexOf(socket), 1);
       console.log('socket disconnection %s' , connections.length);
   });

   //Listen to event telegram Message "contact"
   socket.on('send message',function(data){
       //emit Msg From from
       io.sockets.emit('new message', { msg: data });
   });

});

//var server = require('../app').server;


console.log("Started on Port " + port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

exports.server = server;
